 // app.js file for  login and signup authentication using async storage




 import React, { useEffect } from 'react';
import {View,StyleSheet, ActivityIndicator} from 'react-native';
import { NavigationContainer } from '@react-navigation/native';
import {createDrawerNavigator} from "@react-navigation/drawer";


import MyTabs from './MyTabs';
import { DrawerContent } from './DrawerContent';
import RootStackScreen from './RootStackScreen';

import {AuthContext} from './components/context';

import AsyncStorage from '@react-native-async-storage/async-storage';

const Drawer=createDrawerNavigator();

const App = () =>{

  // const[isLoading,setIsLoading]=React.useState(true);
  // const[userToken,setUserToken]=React.useState(true);

  const initialLoginState ={
    isLoading:true,
    userName:null,       // initial it will be null
    userToken:null        // initial it will be null
  };

  const loginReducer =(prevState,action) =>{
  switch(action.type){
    case 'RETRIEVE_TOKEN':
      return{
        ...prevState,
        userToken: action.token,
        isLoading:false
      };

      case 'LOGIN':
      return{
        ...prevState,
        userName:action.id,
        userToken:action.token,
        isLoading:false
      };

      case 'LOGOUT':
      return{
        ...prevState,
        userName:null,
        userToken:null,
        isLoading:false
      };

      case 'REGISTER':
      return{
        ...prevState,
        userName:action.id,
        userToken:action.token,
        isLoading:false
      };
  }
  };

  const [loginState ,dispatch] = React.useReducer(loginReducer,initialLoginState);

  const authContext = React.useMemo(() =>({
    signin: async(userName, password) =>{
      // setUserToken('fgkj');
      // setIsLoading(false);

      let userToken;
      userToken=null;

      if(userName=='user' && password == 'pass')   // if username = user and password is = pass thn only login
      {
        try{
          await AsyncStorage.getItem('userToken',userToken);
        }catch(e){
          console.log(e);
        }
        userToken='jfjdv';  // any random token we will provide
      }

      dispatch({ type:'LOGIN',id:userName,token:userToken});
    },
    signout: async() =>{
      // setUserToken(null);
      // setIsLoading(false);

      try{
        await AsyncStorage.removeItem('userToken');
      }catch(e){
        console.log(e);
      }
    
      dispatch({ type:'LOGOUT'});
    },

    signup: () =>{
      setUserToken('fgkj');
      setIsLoading(false);
    }
  }));
useEffect(() => {
  setTimeout(async() =>  {
    // setIsLoading(false);

    let userToken;
    userToken=null;
    try{
      userToken= await AsyncStorage.getItem('userToken');
    }catch(e){
      console.log(e);
    }
    dispatch({ type:'RETRIEVE_TOKEN',token:userToken});
  },1000)
},[]);

if(loginState.isLoading){

  return(
    <View style={{flex:1,justifyContent:'center',alignItems:'center'}}>
      <ActivityIndicator size="large" />
    </View>
  );
}
return(
  <AuthContext.Provider value={authContext}>

 
  <NavigationContainer>
    {/* <Drawer.Navigator drawerContent={props =><DrawerContent {...props} />}>
      <Drawer.Screen name="HomeDrawer" component={MyTabs} />

   
    </Drawer.Navigator> */}

    {loginState.userToken!=null ?(
      <Drawer.Navigator drawerContent={props => <DrawerContent {...props} />}>
    
      <Drawer.Screen name="HomeDrawer" component={MyTabs} />

   
    </Drawer.Navigator>
    )
:
    <RootStackScreen/>
  }
    {/* <RootStackScreen/> */}
  </NavigationContainer>
  </AuthContext.Provider>
)
}
/// it is the code for the drawercontent.js file
export default App;